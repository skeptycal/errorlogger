package errorlogger // import "github.com/skeptycal/errorlogger"

Package errorlogger implements error logging to a logrus log (or a standard
library log) by providing a convenient way to log errors and to temporarily
disable/enable logging.

A global Log and Err with default behaviors are supplied that may be aliased
if you wish:

    Log = errorlogger.Log
    Err = errorlogger.Err

If you do not intend to use any options or disable the logger, it may be
more convenient to use a function alias to call the most common method,
Err(), like this:

    var Err = errorlogger.New().Err

then, just call the function:

    err := someProcess(stuff)
    if err != nil {
     return Err(err)
    }

Either way, the default ErrorLogger is enabled and ready to go:

    EL := errorlogger.New() // enabled by default
    Err := EL.Err

If a private ErrorLogger is desired, or if name collisions with Err cause
conflicts, you may implement your own.

    myErr := errorlogger.New()
    err := myErr.Err

Example:

     f, err := os.Open("somefile.txt")
     if err != nil {
    	 return nil, e.Err(err) // avoids additional logging steps
     }
     e.Disable() // can be disabled and enabled as desired

var Log = New() ...
var ParseLevel ...
func Example()
type Entry = logrus.Entry
type ErrorLogger interface{ ... }
    func New() ErrorLogger
    func NewWithOptions(enabled bool, fn LoggerFunc, wrap error) ErrorLogger
type Ext1FieldLogger = logrus.Ext1FieldLogger
type Fields = logrus.Fields
type Formatter = logrus.Formatter
type Hook = logrus.Hook
type Level = logrus.Level
type LevelHooks = logrus.LevelHooks
type LogFunction = logrus.LogFunction
type Logger = logrus.Logger
type LoggerFunc = func(args ...interface{})
type LogrusCommonOptions interface{ ... }
type LogrusFieldLogger = logrus.FieldLogger
type LogrusLogFunctions interface{ ... }
type LogrusLogger interface{ ... }
type LogrusLoggerComplete interface{ ... }
type LogrusOptions interface{ ... }
type Options struct{ ... }
